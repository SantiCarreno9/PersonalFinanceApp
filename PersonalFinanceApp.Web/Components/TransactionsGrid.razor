@inherits CustomBase
@using Microsoft.AspNetCore.Components.QuickGrid

<QuickGrid Class="table table-hover w-100 align-middle" ItemsProvider="@TransactionItemsProvider" Pagination="state" @ref=TransactionGrid>
    <TemplateColumn Class="p-0 m-0">
        <HeaderTemplate>
            <div class="mb-1 mx-1 w-100 justify-content-center align-top">
                <input class="form-check-input m-0" type="checkbox" id="allCheckbox" />
            </div>
        </HeaderTemplate>
        <ChildContent>
            <div class="d-flex w-100 justify-content-center my-2 px-1">
                <input class="form-check-input items-toggle" type="checkbox" @onchange="(value)=>OnTransactionSelected(context.Id,(bool)value.Value!)" />
            </div>
        </ChildContent>
    </TemplateColumn>    
    <TemplateColumn Title="Location" Sortable="true">
        <ChildContent>
            <div @onclick="()=>OnTransactionClicked?.Invoke(context.Id)">
                @context.Location
            </div>
        </ChildContent>
    </TemplateColumn>
    <TemplateColumn Title="Date" Sortable="true">
        <div @onclick="()=>OnTransactionClicked?.Invoke(context.Id)">
            @context.Date.ToString("MMM dd, yyyy")
        </div>
    </TemplateColumn>
    <TemplateColumn Title="Payment Method" Sortable="true">
        <div @onclick="()=>OnTransactionClicked?.Invoke(context.Id)">
            @GetPaymentMethod(@context.PaymentMethodId)
        </div>
    </TemplateColumn>
    <TemplateColumn Title="Category" Sortable="true">
        <div @onclick="()=>OnTransactionClicked?.Invoke(context.Id)">
            @GetCategoryName(@context.CategoryId)
        </div>
    </TemplateColumn>
    @if (currentTransactionType == TransactionTypes.All)
    {
        <TemplateColumn Title="Type">
            <div @onclick="()=>OnTransactionClicked?.Invoke(context.Id)">
                @(context.TransactionTypeId == (byte)TransactionTypes.Expense ? "Expense" : "Income")
            </div>
        </TemplateColumn>
    }
    <TemplateColumn Title="Amount" Sortable="true">
        <div @onclick="()=>OnTransactionClicked?.Invoke(context.Id)">
            @context.TotalAmount.ToString("C")
        </div>
    </TemplateColumn>
</QuickGrid>
@if (!anyResultsFound)
{
    <h2 strong style="text-align:center">NO ITEMS FOUND</h2>
}
<Paginator State="state"></Paginator>

<script>
    const deleteButton = document.getElementById('deleteButton');

    $(document).on('change', 'input[type="checkbox"]', function (e) {
        const checked = $(this).prop("checked");
        const parent = document.getElementsByTagName('tbody');

        if ($(this).attr('id') != null && $(this).attr('id') === 'allCheckbox') {
            const checkboxes = $(parent).find('input[type="checkbox"]');

            const e = new Event('change');
            for (let i = 0; i < checkboxes.length; i++) {
                checkboxes[i].checked = checked;
                checkboxes[i].dispatchEvent(e);
                $(checkboxes[i]).trigger('change');
            }

            deleteButton.disabled = !checked;
            return;
        }

        if (checked)
            $(this).parent().parent().parent().addClass("table-active");
        else $(this).parent().parent().parent().removeClass("table-active");

        const checkedCheckboxesCount = $(parent).find('input[type="checkbox"]:checked').length;
        const allCheckboxesCount = $(parent).find('input[type="checkbox"]').length;
        const indeterminate = (checkedCheckboxesCount > 0 && checkedCheckboxesCount < allCheckboxesCount);
        const allchecked = (checkedCheckboxesCount === allCheckboxesCount);
        $('#allCheckbox').prop("checked", allchecked);
        $('#allCheckbox').prop("indeterminate", indeterminate);
        deleteButton.disabled = !(indeterminate || allchecked);
    });

</script>